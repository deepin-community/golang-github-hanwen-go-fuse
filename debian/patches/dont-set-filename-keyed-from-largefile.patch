From e9e7c22af17af4611b5783a16458647088cc8dec Mon Sep 17 00:00:00 2001
From: Han-Wen Nienhuys <hanwen@google.com>
Date: Fri, 9 Feb 2024 15:01:33 +0100
Subject: [PATCH] fuse: don't set flagname keyed by syscall.O_LARGEFILE

On amd64, syscall.O_LARGEFILE is 0x0, making it be ignored as a
key. However, the kernel always passes 0x8000 to the FUSE server for
the OPEN call.

The previous behavior causes crashes on 386, because the flagname is
added twice.

Change-Id: Ibabcdfef4d90e4fa4d02963d45a4d4cf2cba1ea2
---
 fuse/print.go       | 22 ++++++++++++----------
 fuse/print_linux.go |  1 -
 2 files changed, 12 insertions(+), 11 deletions(-)

--- a/fuse/print.go
+++ b/fuse/print.go
@@ -62,16 +62,18 @@
 		RELEASE_FLUSH: "FLUSH",
 	})
 	openFlagNames = newFlagNames(map[int64]string{
-		int64(os.O_WRONLY):         "WRONLY",
-		int64(os.O_RDWR):           "RDWR",
-		int64(os.O_APPEND):         "APPEND",
-		int64(syscall.O_ASYNC):     "ASYNC",
-		int64(os.O_CREATE):         "CREAT",
-		int64(os.O_EXCL):           "EXCL",
-		int64(syscall.O_NOCTTY):    "NOCTTY",
-		int64(syscall.O_NONBLOCK):  "NONBLOCK",
-		int64(os.O_SYNC):           "SYNC",
-		int64(os.O_TRUNC):          "TRUNC",
+		int64(os.O_WRONLY):        "WRONLY",
+		int64(os.O_RDWR):          "RDWR",
+		int64(os.O_APPEND):        "APPEND",
+		int64(syscall.O_ASYNC):    "ASYNC",
+		int64(os.O_CREATE):        "CREAT",
+		int64(os.O_EXCL):          "EXCL",
+		int64(syscall.O_NOCTTY):   "NOCTTY",
+		int64(syscall.O_NONBLOCK): "NONBLOCK",
+		int64(os.O_SYNC):          "SYNC",
+		int64(os.O_TRUNC):         "TRUNC",
+		// syscall.O_LARGEFILE is 0x0 on x86_64, but the
+		// kernel supplies 0x8000 anyway.
 		0x8000:                     "LARGEFILE",
 		int64(syscall.O_CLOEXEC):   "CLOEXEC",
 		int64(syscall.O_DIRECTORY): "DIRECTORY",
--- a/fuse/print_linux.go
+++ b/fuse/print_linux.go
@@ -11,7 +11,6 @@
 
 func init() {
 	openFlagNames.set(syscall.O_DIRECT, "DIRECT")
-	openFlagNames.set(syscall.O_LARGEFILE, "LARGEFILE")
 	openFlagNames.set(syscall_O_NOATIME, "NOATIME")
 }
 
